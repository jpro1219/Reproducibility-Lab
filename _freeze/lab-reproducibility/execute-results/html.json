{
  "hash": "416ea852c68975617f6807e0cd14e315",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab XX: Reproducibility\"\nexecute:\n  freeze: auto\n  echo: true\n  warning: false\n  message: false\nformat: html\nbibliography: references.bib\n---\n\n\n\n::: callout-important\n# Due date\n\nThis lab is due on **XX/XX.** To be considered on time, the following must be done by the due date:\n\n-   Final `.qmd` and `.pdf` files submitted to Canvas\n:::\n\n# Reproducibility\n\nIn this lab, you will run code based on analysis in published studies. You will resolve any errors in the given code, detailing and fixing any differences in the provided analysis and the run code. Then, you will assess the reproducibility of the given analysis and document what errors and inconsistencies were encountered. The text excerpts used in this lab were adapted off @wagner2021\n\n# Learning goals\n\nBy the end of the lab you will be able to…\n\n-   validate or invalidate the original findings of a research study\n\n-   Reproduce the figures and analysis from a research study\n\n-   Resolve errors common in code published from research studies\n\n-   Assess the reproducibility of the study\n\n# Getting started\n\n# Packages\n\nYou will use the following packages in today’s lab. To install any missing packages, run the following chunk:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Used packages that need to be installed to run code (and can be sourced easier from CRAN):\n\nneeded_packages <- c(\"tidyverse\", \"tidymodels\", \"knitr\", \"ggpubr\", \"pROC\", \"GGally\", \"caret\", \"caTools\", \"e1071\", \"MASS\", \"randomForest\", \"car\") # Specify necessary packages\n\nnot_installed <- needed_packages[!(needed_packages %in% installed.packages()[ , \"Package\"])] # Extract not installed packages\nif(length(not_installed)) install.packages(not_installed) # Install not installed packages\n```\n:::\n\n\n\nThe following chunk will load the packages required:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(knitr)\nlibrary(ggpubr)\nlibrary(pROC)\nlibrary(GGally)\nlibrary(caret)\nlibrary(caTools)\nlibrary(e1071)\nlibrary(MASS)\nlibrary(randomForest)\nlibrary(car)\n```\n:::\n\n\n\n# Data\n\nThe data in this lab contains measures describing the physiology of hypothetical edible and poisonous mushrooms. The secondary set was developed based on the species listed in a mushroom identification text book and results of a dataset developed by UCI in 1987. They simulated several characteristics based on this information. The data were orginally presented and analyzed in @wagner2021 and was obtained from the [UCI Machine Learning Repository](https://archive.ics.uci.edu/dataset/848/secondary+mushroom+dataset).\n\nThis analysis includes the following variables (after data cleaning and renaming):\n\n-   `cap-diameter`: diameter of mushroom cap measured in cm\n\n-   `cap-shape`: bell, conical, convex, flat, sunken, spherical, others\n\n-   `cap-color`: brown, buff, gray, green, pink, purple, red, white, yellow, blue, orange, black\n\n-   `does-bruise-or-bleed`: yes, no\n\n-   `gill-color`: see cap color\n\n-   `stem-height`: height of stem measured in cm\n\n-   `Area`: size of the rice grain measured in pixels\n\n-   `stem-width`: width of stem measured in mm\n\n-   `stem-color`: see cap color\n\n-   `has-ring`: yes, no\n\n-   `habitat`: grasses, leaves, meadows, paths, heaths, urban, waste, woods\n\n-   `season`: spring, summer, autumn, winter\n\n[Click here](https://archive.ics.uci.edu/dataset/848/secondary+mushroom+dataset) for the full data dictionary.\n\n# Exercises\n\n**Goal**: The goal of the analysis is to resolve any errors or add any code necessary to validate and reproduce the provided figures.\n\n## Exercise 0\n\nA primary issue in reproducibility is the public availability of code and raw data in published literature. To improve the reproducibility, many authors link a GitHub repository in their study. For the following reproducibility lab, the GitHub is linked as follows: https://github.com/jpro1219/Reproducibility-Lab\n\ngit clone https://github.com/jpro1219/Reproducibility-Lab\n\nClone the repository to your system and then move the data file mushrooms.csv into your data structure. Then read the data into the system.\n\n(Possible errors to put in: do not convert NA strings, do not put in semicolons as separators)\n\n\n\n::: {.cell lable='read-data'}\n\n```{.r .cell-code}\nmushrooms <- read.csv(\"data/mushrooms.csv\", sep=';', na.strings=c(\"\", \"NA\")) # Convert empty strings to NA\n```\n:::\n\n\n\n## Exercise 1\n\nData cleaning: removing columns with missing values, removing columns with unknown category, renaming categorical variables, turning class into factor\n\nPossible errors: Changing poisonous to be 1, nonpoisonous to 0, allowing students to figure out that stem color contains an unknown value, skipping one or two values in categorical data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Remove columns with missing values\n\ncleaned_mushrooms <- mushrooms\nfor (colname in colnames(mushrooms)){\n  if (sum(is.na(mushrooms[colname])) != 0){ # Columns with 1 or more missing values\n    cleaned_mushrooms[colname] <- NULL\n  }\n}\n## Remove column with extraneous category\ncleaned_mushrooms <- subset(cleaned_mushrooms, select = -stem.color) # Stem color contained one unknown value\n\n## Renaming categorical variables for clear identification\ncleaned_mushrooms$class <- factor(cleaned_mushrooms$class)\nlevels(cleaned_mushrooms$class) <- c(\"Edible\", \"Poisonous\")\ncleaned_mushrooms$does.bruise.or.bleed <- factor(cleaned_mushrooms$does.bruise.or.bleed)\nlevels(cleaned_mushrooms$does.bruise.or.bleed) <- c(\"No\", \"Yes\")\ncleaned_mushrooms$has.ring <- factor(cleaned_mushrooms$has.ring)\nlevels(cleaned_mushrooms$has.ring) <- c(\"No\", \"Yes\")\ncleaned_mushrooms$cap.shape <- factor(cleaned_mushrooms$cap.shape)\nlevels(cleaned_mushrooms$cap.shape) <- c(\"Bell\", \"Conical\", \"Flat\", \"Others\", \"Spherical\", \"Sunken\", \"Convex\")\ncleaned_mushrooms$cap.color <- factor(cleaned_mushrooms$cap.color)\nlevels(cleaned_mushrooms$cap.color) <- c(\"Buff\", \"Red\", \"Gray\", \"Black\", \"Blue\", \"Brown\", \"Orange\", \"Pink\", \"Green\", \"Purple\", \"White\", \"Yellow\")\ncleaned_mushrooms$gill.color <- factor(cleaned_mushrooms$gill.color)\nlevels(cleaned_mushrooms$gill.color) <- c(\"Buff\", \"Red\", \"Gray\", \"Black\", \"Blue\", \"Brown\", \"Orange\", \"Pink\", \"Green\", \"Purple\", \"White\", \"Yellow\")\ncleaned_mushrooms$habitat <-\nfactor(cleaned_mushrooms$habitat)\nlevels(cleaned_mushrooms$habitat) <- c(\"Woods\", \"Grasses\", \"Heaths\", \"Leaves\", \"Meadows\", \"Paths\", \"Urban\", \"Waste\")\ncleaned_mushrooms$season <-\nfactor(cleaned_mushrooms$season)\nlevels(cleaned_mushrooms$season) <- c(\"Autumn\", \"Spring\", \"Summer\", \"Winter\")\n\n## Adding category for class as a binary variable\ncleaned_mushrooms <- cleaned_mushrooms |>\n  mutate(\n    binary_class = as.factor(if_else(class == \"Poisonous\", 1, 0)))\n```\n:::\n\n\n\n## Exercise 2\n\nExploratory data analysis\n\nPossible error: having one variables' values negated in the data file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Plotting quantitative variables\n\n\ncap_edible_plot <- ggplot(subset(cleaned_mushrooms, class == \"Edible\"), aes(cap.shape, cap.diameter)) +\n  labs(title=\"Edible Mushroom Cap Diameter by Shape\", x=\"Cap Shape\", y=\"Cap Diameter (cm)\") +\n  geom_boxplot()\n\ncap_poison_plot <- ggplot(subset(cleaned_mushrooms, class == \"Poisonous\"), aes(cap.shape, cap.diameter)) +\n  labs(title=\"Poisonous Mushroom Cap Diameter by Shape\", x=\"Cap Shape\", y=\"Cap Diameter (cm)\") +\n  geom_boxplot()\n\ncap_color_edible_plot <- ggplot(subset(cleaned_mushrooms, class==\"Edible\"), aes(cap.color, cap.diameter)) + \n  labs(title=\"Edible Mushroom Cap Diameter by Color\", x=\"Cap Color\", y=\"Cap Diameter (cm)\") +\n  geom_boxplot()\n\ncap_color_poison_plot <- ggplot(subset(cleaned_mushrooms, class==\"Poisonous\"), aes(cap.color, cap.diameter)) + \n  labs(title=\"Poisonous Mushroom Cap Diameter by Color\", x=\"Cap Color\", y=\"Cap Diameter (cm)\") +\n  geom_boxplot()\n\nedible_plot <- ggplot(subset(cleaned_mushrooms, class == 'Edible'), aes(x = stem.width, y = stem.height, color= has.ring)) +\n  labs(title=\"Stem dimensions for Edible Mushrooms\", color=\"Has Ring\", x=\"Stem Width (cm)\", y=\"Stem Height (cm)\") +\n  geom_point()\n\npoison_plot <- ggplot(subset(cleaned_mushrooms, class == 'Poisonous'), aes(x = stem.width, y = stem.height, color=has.ring)) +\n  labs(title=\"Stem dimensions for Poisonous Mushrooms\", color=\"Has Ring\", x=\"Stem Width (cm)\", y=\"Stem Height (cm)\") +\n  geom_point()\n\n## Plotting categorical variables\n\nbruise_bleed <- as.data.frame(table(cleaned_mushrooms$does.bruise.or.bleed, cleaned_mushrooms$class))\nbruise_plot <- ggplot(bruise_bleed, aes(Var1, Var2, fill=Freq)) +\n  labs(title=\"Heat map of Bruising/Bleeding by Class\", x=\"Does Bruise/Bleed\", y=\"Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile()\n\ngill_color <- as.data.frame(table(cleaned_mushrooms$gill.color, cleaned_mushrooms$class))\ngill_color_plot <- ggplot(gill_color, aes(Var1, Var2, fill=Freq)) + \n  labs(title=\"Heat map of Gill Color by Class\", x=\"Gill Color\", y=\"Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile()\n\nhabitat <- as.data.frame(table(cleaned_mushrooms$habitat, cleaned_mushrooms$class))\nhabitat_plot <- ggplot(habitat, aes(Var1, Var2, fill=Freq)) + \n  labs(title=\"Heat map of Mushroom Habitat by Class\", x=\"Habitat\", y=\"Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile()\n\nseason <- as.data.frame(table(cleaned_mushrooms$season, cleaned_mushrooms$class))\nseason_plot <- ggplot(season, aes(Var1, Var2, fill=Freq)) + \n  labs(title=\"Heat map of Season Mushroom is Found by Class\", x=\"Season\", y=\"Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile()\n\n## Compile all plots into figure, organized by part of mushroom\nggarrange(cap_edible_plot, cap_poison_plot, cap_color_edible_plot, cap_color_poison_plot, edible_plot, poison_plot, bruise_plot, gill_color_plot, habitat_plot, season_plot, nrow = 5, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](lab-reproducibility_files/figure-html/unnamed-chunk-4-1.png){width=1536}\n:::\n:::\n\n\n\n## Exercise 3\n\nCreating training and test sets for our data analysis\n\nPossible errors: Change numbers but comment the correct\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Set seed to 105 \nset.seed(105)\n\n## Take 75% of the cleaned mushrooms set for the training set, the remaining for the test set\nmushroom_numbers <- sample(seq_len(nrow(cleaned_mushrooms)), size = 0.75*nrow(cleaned_mushrooms))\n\nmushroom_train <- cleaned_mushrooms[mushroom_numbers,]\nmushroom_test <- cleaned_mushrooms[-mushroom_numbers,]\n```\n:::\n\n\n\n## Exercise 4\n\nMeasuring covariance of the variables\n\nPossible error: Add variable that has already been removed\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Create regression model with all variables, no interaction terms to keep all uniform\nlogit_reg_model <- glm(binary_class ~ stem.height + cap.diameter + cap.shape + cap.color + does.bruise.or.bleed + gill.color + stem.width + has.ring + habitat + season, data = mushroom_train, family = \"binomial\")\n\nvif_values <- vif(logit_reg_model)\n  kable(vif_values, digits = 3)\n```\n\n::: {.cell-output-display}\n\n\n|                     |  GVIF| Df| GVIF^(1/(2*Df))|\n|:--------------------|-----:|--:|---------------:|\n|stem.height          | 1.934|  1|           1.391|\n|cap.diameter         | 2.730|  1|           1.652|\n|cap.shape            | 4.030|  6|           1.123|\n|cap.color            | 3.189| 11|           1.054|\n|does.bruise.or.bleed | 1.286|  1|           1.134|\n|gill.color           | 6.756| 11|           1.091|\n|stem.width           | 2.576|  1|           1.605|\n|has.ring             | 1.314|  1|           1.146|\n|habitat              | 1.531|  7|           1.031|\n|season               | 1.220|  3|           1.034|\n\n\n:::\n:::\n\n\n\n## Exercise 5\n\nTraining our other models\n\nPossible error: Remove a variable from one or more so that they are not uniform\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnaive_bayes_model <- naiveBayes(binary_class ~ stem.height + cap.shape + cap.diameter + cap.color + does.bruise.or.bleed + gill.color + stem.width + has.ring + habitat + season, data = mushroom_train)\n\nlda_model <- lda(binary_class ~ stem.height + cap.diameter + cap.shape + cap.color + does.bruise.or.bleed + gill.color + stem.width + has.ring + habitat + season, data = mushroom_train)\n\nrf_model <- randomForest(binary_class ~ stem.height + cap.diameter + cap.shape + cap.color + cap.diameter + does.bruise.or.bleed + gill.color + stem.width + has.ring + habitat + season, data = mushroom_train)\n```\n:::\n\n\n\n## Exercise 6\n\nCreating predictive probabilities and classes\n\nPossible Error: Use an incorrect threshold\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Find probabilities and classify with standard threshold\n\nlogit_pred_prob <- predict.glm(logit_reg_model, newdata=mushroom_test, type=\"response\")\nlogit_pred_class <- factor(ifelse(logit_pred_prob >0.50, 1, 0))\n\nbayes_pred_prob <- predict(naive_bayes_model, newdata = mushroom_test, type = \"raw\")\nnaive_bayes_pred_class <- predict(naive_bayes_model, newdata = mushroom_test)\n\nlda_pred_prob <- predict(lda_model, newdata = mushroom_test, type = \"prob\")\nlda_pred_class <- predict(lda_model, newdata = mushroom_test)\n\nrf_pred_prob <- predict(rf_model, newdata = mushroom_test, type = \"prob\")\nrf_pred_class <- predict(rf_model, newdata = mushroom_test)\n```\n:::\n\n\n\n## Exercise 7\n\nCreating and plotting confusion matrices\n\nPossible Error: Rows/columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Compile all plots into figure, organized by part of mushroom\n\nbayes_conf <- as.data.frame(table(mushroom_test$binary_class, naive_bayes_pred_class))\nbayes_conf_plot <- ggplot(bayes_conf, aes(Var1, naive_bayes_pred_class, fill=Freq)) +\n  labs(title=\"Naive Bayes Confusion Matrix\", x=\"True Class\", y=\"Predicted Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile()\n\nlogit_conf <- as.data.frame(table(mushroom_test$binary_class, logit_pred_class))\nlogit_conf_plot <- ggplot(logit_conf, aes(Var1, logit_pred_class, fill=Freq)) +\n  labs(title=\"Logistic Regression Confusion Matrix\", x=\"True Class\", y=\"Predicted Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile()\n\nlda_conf <- as.data.frame(table(mushroom_test$binary_class, lda_pred_class[['class']]))\nlda_conf_plot <- ggplot(lda_conf, aes(Var1, Var2, fill=Freq)) +\n  labs(title=\"LDA Confusion Matrix\", x=\"True Class\", y=\"Predicted Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile()\n\nrf_conf <- as.data.frame(table(mushroom_test$binary_class, rf_pred_class))\nrf_conf_plot <- ggplot(rf_conf, aes(Var1, rf_pred_class, fill=Freq)) +\n  labs(title=\"rf Confusion Matrix\", x=\"True Class\", y=\"Predicted Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile()\n\nggarrange(bayes_conf_plot, logit_conf_plot, lda_conf_plot, rf_conf_plot, nrow = 2, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](lab-reproducibility_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n## Exercise 8\n\nAccuracy and F2\n\nPossible errors: mess with ggarrange, write function for accuracy, f2 and flip them\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Calculate accuracy and f2 from the confusion matrix\nTN <- logit_conf[1,3] # Set all values on conf matrix\nFP <- logit_conf[3,3]\nFN <- logit_conf[2,3]\nTP <- logit_conf[4,3]\nprecision <- TP/(TP + FP) # Apply formula for precision and recall (to plug into f2 score calculation)\nrecall <- TP/(TP + FN)\naccuracy_logit <- (TP + TN) / sum(logit_conf[,3])\nf2_logit <- (1 + 2^2)*precision*recall/((2^2*precision) + recall)\n\nTN <- bayes_conf[1,3] # Set all values on conf matrix\nFP <- bayes_conf[3,3]\nFN <- bayes_conf[2,3]\nTP <- bayes_conf[4,3]\nprecision <- TP/(TP + FP) # Apply formula for precision and recall (to plug into f2 score calculation)\nrecall <- TP/(TP + FN)\naccuracy_bayes <- (TP + TN) / sum(bayes_conf[,3])\nF2_bayes  <- (1 + 2^2)*precision*recall/((2^2*precision) + recall)\n\nTN <- lda_conf[1,3] # Set all values on conf matrix\nFP <- lda_conf[3,3]\nFN <- lda_conf[2,3]\nTP <- lda_conf[4,3]\nprecision <- TP/(TP + FP) # Apply formula for precision and recall (to plug into f2 score calculation)\nrecall <- TP/(TP + FN)\naccuracy_lda <- (TP + TN) / sum(lda_conf[,3])\nF2_lda <- (1 + 2^2)*precision*recall/((2^2*precision) + recall)\n\nTN <- rf_conf[1,3] # Set all values on conf matrix\nFP <- rf_conf[3,3]\nFN <- rf_conf[2,3]\nTP <- rf_conf[4,3]\nprecision <- TP/(TP + FP) # Apply formula for precision and recall (to plug into f2 score calculation)\nrecall <- TP/(TP + FN)\naccuracy_rf <- (TP + TN) / sum(rf_conf[,3])\nF2_rf <- (1 + 2^2)*precision*recall/((2^2*precision) + recall)\n\n## Plot accuracy and F2 together\n\nmodels <- c(\"RF\", \"LDA\", \"Logit-Reg\", \"Naiv-Bayes\")\naccuracy <- c(accuracy_rf, accuracy_lda, accuracy_logit, accuracy_bayes)\nf2 <- c(F2_rf, F2_lda, f2_logit, F2_bayes)\nmodel_ratings <- data.frame(models, accuracy, f2)\n\nAccuracy_plot <- ggplot(model_ratings, aes(x = models, y=accuracy)) +\n  labs(title=\"Model Accuracy\", x=\"Model Type\", y=\"Accuracy\") +\n  geom_bar(stat = \"identity\")\n  \nF2_plot <- ggplot(model_ratings, aes(x = models, y=f2)) +\n  labs(title=\"Model F2 Score\", x=\"Model Type\", y=\"F2 Score\") +\n  geom_bar(stat = \"identity\")\n\nggarrange(Accuracy_plot, F2_plot, nrow = 1, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](lab-reproducibility_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nscoring <- data.frame(Model=c(\"Accuracy\", \"F2\"), Bayes = c(accuracy_bayes, F2_bayes), Logit=c(accuracy_logit, f2_logit), LDA = c(accuracy_lda, F2_lda), RF = c(accuracy_rf, F2_rf))\nkable(scoring, digits = 3)\n```\n\n::: {.cell-output-display}\n\n\n|Model    | Bayes| Logit|   LDA|    RF|\n|:--------|-----:|-----:|-----:|-----:|\n|Accuracy | 0.631| 0.684| 0.681| 0.992|\n|F2       | 0.771| 0.733| 0.734| 0.993|\n\n\n:::\n:::\n\n\n\n## Exercise 9\n\nROC Curves\n\nPossible errors: Incorrect subscripts\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Create ROC plots for each\nroc.logit <- roc(as.numeric(mushroom_test$binary_class), logit_pred_prob)\n\n\nroc.bayes <- roc(as.numeric(mushroom_test$binary_class), bayes_pred_prob[,2])\n\n\nroc.lda <- roc(as.numeric(mushroom_test$binary_class), lda_pred_prob$posterior[, 2])\n\n\nroc.rf <- roc(as.numeric(mushroom_test$binary_class), rf_pred_prob[,2])\n\n## Combine all roc plots into one graph\nggroc(list(Logit = roc.logit, Bayes = roc.bayes, LDA = roc.lda, RF = roc.rf)) +\n  labs(title = \"ROC Curve Comparison\")\n```\n\n::: {.cell-output-display}\n![](lab-reproducibility_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n## Exercise 10\n\nTable with AUCs\n\nPossible error: Give wrong table\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Create table with aucs of the rocs\naucs <- data.frame(method=c(\"Logistic Regression\", \"Naive Bayes\", \"LDA\", \"RF\"), auc=c(auc(roc.logit), auc(roc.bayes), auc(roc.lda), auc(roc.rf)))\nkable(aucs, digits = 3)\n```\n\n::: {.cell-output-display}\n\n\n|method              |   auc|\n|:-------------------|-----:|\n|Logistic Regression | 0.759|\n|Naive Bayes         | 0.717|\n|LDA                 | 0.760|\n|RF                  | 1.000|\n\n\n:::\n:::\n",
    "supporting": [
      "lab-reproducibility_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}