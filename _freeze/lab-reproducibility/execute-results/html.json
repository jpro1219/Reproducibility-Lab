{
  "hash": "be12ecc99541ef7e6babe0f2288acd98",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab XX: Reproducibility\"\nexecute:\n  freeze: auto\n  echo: true\n  warning: false\n  message: false\nformat: html\nbibliography: references.bib\n---\n\n\n\n::: callout-important\n# Due date\n\nThis lab is due on **XX/XX.** To be considered on time, the following must be done by the due date:\n\n-   Final `.qmd` and `.pdf` files submitted to Canvas\n:::\n\n# Reproducibility\n\nIn this lab, you will run code based on the data analysis in a published paper on identifying poisonous mushrooms. Based on the guided instructions and the errors you receive, you will fix the code to make it better run on your system. Then, you will assess the reproducibility of the given analysis and document what errors and inconsistencies were encountered. The text excerpts used in this lab were adapted off @wagner2021\n\n# Learning goals\n\nBy the end of the lab you will be able to…\n\n-   Clone and utilize files from GitHub through RStudio\n\n-   Reproduce the figures and analysis from a research study\n\n-   Find and resolve errors which hinder reproducibility\n\n-   Assess the reproducibility of the study\n\n# Getting started\n\n# Packages\n\nYou will use the following packages in today’s lab. To install any missing packages, run the following chunk:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Used packages that need to be installed to run code (and can be sourced easier from CRAN):\n\nneeded_packages <- c(\"tidyverse\", \"tidymodels\", \"knitr\", \"ggpubr\", \"pROC\", \"GGally\", \"caret\", \"caTools\", \"e1071\", \"MASS\", \"randomForest\", \"car\") # Specify necessary packages\n\nnot_installed <- needed_packages[!(needed_packages %in% installed.packages()[ , \"Package\"])] # Extract not installed packages\nif(length(not_installed)) install.packages(not_installed) # Install not installed packages\n```\n:::\n\n\n\nThe following chunk will load the packages required:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(knitr)\nlibrary(ggpubr)\nlibrary(pROC)\nlibrary(GGally)\nlibrary(caret)\nlibrary(caTools)\nlibrary(e1071)\nlibrary(MASS)\nlibrary(randomForest)\nlibrary(car)\n```\n:::\n\n\n\n# Data\n\nThe data in this lab contains measures describing the physiology of hypothetical edible and poisonous mushrooms. The secondary set was developed based on the species listed in a mushroom identification text book and results of a dataset developed by UCI in 1987. They simulated several characteristics based on this information. The data were orginally presented and analyzed in @wagner2021 and was obtained from the [UCI Machine Learning Repository](https://archive.ics.uci.edu/dataset/848/secondary+mushroom+dataset).\n\nThis analysis includes the following variables (after data cleaning and renaming):\n\n-   `cap-diameter`: diameter of mushroom cap measured in cm\n\n-   `cap-shape`: bell, conical, convex, flat, sunken, spherical, others\n\n-   `cap-color`: brown, buff, gray, green, pink, purple, red, white, yellow, blue, orange, black\n\n-   `does-bruise-or-bleed`: yes, no\n\n-   `gill-color`: see cap color\n\n-   `stem-height`: height of stem measured in cm\n\n-   `Area`: size of the rice grain measured in pixels\n\n-   `stem-width`: width of stem measured in mm\n\n-   `stem-color`: see cap color\n\n-   `has-ring`: yes, no\n\n-   `habitat`: grasses, leaves, meadows, paths, heaths, urban, waste, woods\n\n-   `season`: spring, summer, autumn, winter\n\n[Click here](https://archive.ics.uci.edu/dataset/848/secondary+mushroom+dataset) for the full data dictionary.\n\n# Exercises\n\n**Goal**: The goal of the analysis is to resolve any errors or add any code necessary to validate and reproduce the provided figures.\n\n## Exercise 1\n\nA primary issue in reproducibility is the public availability of code and raw data in published literature. To improve the reproducibility, many authors link a GitHub repository in their study. For the following reproducibility lab, the GitHub is linked as follows: https://github.com/jpro1219/Reproducibility-Lab\n\nRun this code in your Terminal to clone the repository to your system.\n\ngit clone https://github.com/jpro1219/Reproducibility-Lab\n\nNow, move the data file mushrooms.csv into your data structure. Then read the data into the system.\n\n\n\n::: {.cell lable='read-data'}\n\n```{.r .cell-code}\nmushrooms <- read.csv(\"data/mushrooms.csv\")\n```\n:::\n\n\n\nView the dataframe in your environment tab. What character was used as the delimiter?\n\n**Semicolon ;**\n\nTo allow the data to read in correctly, we will need to correctly specify the delimiter in the following chunk.\n\n\n\n::: {.cell lable='read-data'}\n\n```{.r .cell-code}\nmushrooms <- read.csv(\"data/mushrooms.csv\", sep=';') # Specify delimiter as ___\n```\n:::\n\n\n\nReturn to the dataframe and confirm that each observation is read correctly.\n\n## Exercise 2\n\nThe goal of this analysis will be to perform a logistic regression to predict whether a given mushroom is poisonous or edible. There are a few data cleaning considerations that must be taken into account before we begin.\n\nFirst, we want to ensure there are no missing values for predictors in any observation, as this would make it difficult to test any data point, given the nature of these missing points is unknown.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Remove columns with missing values\n\ncleaned_mushrooms <- mushrooms\nfor (colname in colnames(mushrooms)){\n  if (sum(is.na(mushrooms[colname])) != 0){ # Columns with 1 or more missing values\n    cleaned_mushrooms[colname] <- NULL\n  }\n}\n```\n:::\n\n\n\nView the new dataframe cleaned_mushrooms in your environment tab. Do you see any columns with missing values? Which columns?\n\n**Yes, gill.spacing**\n\nThese empty entries are written in the data set as a blank space, rather than NA. To fix this, we can return to our chunk that reads in data and make sure that all missing entries are known to be missing entries. Edit the na.strings parameter to turn all blank entries (\"\") to NA (\"NA\")\n\n\n\n::: {.cell lable='read-data'}\n\n```{.r .cell-code}\nmushrooms <- read.csv(\"data/mushrooms.csv\", sep=';', na.strings=c(\"\", \"NA\")) # Specify delimiter as ___, change na from blank to NA\n```\n:::\n\n\n\nNow run the removal chunk again:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Remove columns with missing values\n\ncleaned_mushrooms <- mushrooms\nfor (colname in colnames(mushrooms)){\n  if (sum(is.na(mushrooms[colname])) != 0){ # Columns with 1 or more missing values\n    cleaned_mushrooms[colname] <- NULL\n  }\n}\n```\n:::\n\n\n\n## Exercise 3\n\nBecause our goal is to identify which mushrooms are poisonous, rather than edible, we want to make sure our outcome \"success\" is defined as poisonous.\n\nBy default, which will R define as a success?\n\n**Edible**\n\nTo ensure that our \"success\" is defined as poisonous, we will create another category for class as a binary variable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Adding category for class as a binary variable\ncleaned_mushrooms <- cleaned_mushrooms |>\n  mutate(\n    binary_class = as.factor(if_else(class == \"Poisonous\", 1, 0)))\n```\n:::\n\n\n\n## Exercise 4\n\nBefore we begin our regression, we should start by identifying some of the more influential predictor variables with some exploratory data analysis. While we have 18 possible predictor variables, we have limited to 10 of the more significant variables (where most entries have a non \"none\" value) to avoid overfitting and losing predictive power.\n\nThe figures from the analysis we are reproducing were a part of the repository you have cloned. Open up the cloned repository and locate the file: this figure should be organized under Reproducibility-Lab/Figures/Figure1_Exploratory.png.\n\nCheck the figure produced in the following chunk against the true figure.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Plotting quantitative variables\n\n\ncap_edible_plot <- ggplot(subset(cleaned_mushrooms, class == \"Edible\"), aes(cap.shape, cap.diameter)) +\n  labs(title=\"Edible Mushroom Cap Diameter by Shape\", x=\"Cap Shape\", y=\"Cap Diameter (cm)\") +\n  geom_boxplot()\n\ncap_poison_plot <- ggplot(subset(cleaned_mushrooms, class == \"Poisonous\"), aes(cap.shape, cap.diameter)) +\n  labs(title=\"Poisonous Mushroom Cap Diameter by Shape\", x=\"Cap Shape\", y=\"Cap Diameter (cm)\") +\n  geom_boxplot()\n\ncap_color_edible_plot <- ggplot(subset(cleaned_mushrooms, class==\"Edible\"), aes(cap.color, cap.diameter)) + \n  labs(title=\"Edible Mushroom Cap Diameter by Color\", x=\"Cap Color\", y=\"Cap Diameter (cm)\") +\n  geom_boxplot()\n\ncap_color_poison_plot <- ggplot(subset(cleaned_mushrooms, class==\"Poisonous\"), aes(cap.color, cap.diameter)) + \n  labs(title=\"Poisonous Mushroom Cap Diameter by Color\", x=\"Cap Color\", y=\"Cap Diameter (cm)\") +\n  geom_boxplot()\n\nedible_plot <- ggplot(subset(cleaned_mushrooms, class == 'Edible'), aes(x = stem.width, y = stem.height, color= stem.color)) +\n  labs(title=\"Stem dimensions for Edible Mushrooms\", color=\"Has Ring\", x=\"Stem Width (cm)\", y=\"Stem Height (cm)\") +\n  geom_point()\n\npoison_plot <- ggplot(subset(cleaned_mushrooms, class == 'Poisonous'), aes(x = stem.width, y = stem.height, color=stem.color)) +\n  labs(title=\"Stem dimensions for Poisonous Mushrooms\", color=\"Has Ring\", x=\"Stem Width (cm)\", y=\"Stem Height (cm)\") +\n  geom_point()\n\n## Plotting categorical variables\n\nbruise_bleed <- as.data.frame(table(cleaned_mushrooms$does.bruise.or.bleed, cleaned_mushrooms$class))\nbruise_plot <- ggplot(bruise_bleed, aes(Var1, Var2, fill=Freq)) +\n  labs(title=\"Heat map of Bruising/Bleeding by Class\", x=\"Does Bruise/Bleed\", y=\"Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile()\n\ngill_color <- as.data.frame(table(cleaned_mushrooms$spore.print.color, cleaned_mushrooms$class))\ngill_color_plot <- ggplot(gill_color, aes(Var1, Var2, fill=Freq)) + \n  labs(title=\"Heat map of Gill Color by Class\", x=\"Gill Color\", y=\"Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile()\n\nhabitat <- as.data.frame(table(cleaned_mushrooms$habitat, cleaned_mushrooms$class))\nhabitat_plot <- ggplot(habitat, aes(Var1, Var2, fill=Freq)) + \n  labs(title=\"Heat map of Mushroom Habitat by Class\", x=\"Habitat\", y=\"Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile()\n\nseason <- as.data.frame(table(cleaned_mushrooms$season, cleaned_mushrooms$class))\nseason_plot <- ggplot(season, aes(Var1, Var2, fill=Freq)) + \n  labs(title=\"Heat map of Season Mushroom is Found by Class\", x=\"Season\", y=\"Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile()\n\n## Compile all plots into figure, organized by part of mushroom\nggarrange(cap_edible_plot, cap_poison_plot, cap_color_edible_plot, cap_color_poison_plot, edible_plot, poison_plot, bruise_plot, gill_color_plot, habitat_plot, season_plot, nrow = 5, ncol = 2)\n```\n:::\n\n\n\nWhat plots differ from the true results?\n\n**Gill color by class uses another color set, stem dimensions uses a different color label than has.ring**\n\nTo correct this, make sure that each plot references the correct column of cleaned_mushrooms\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Plotting quantitative variables\n\n\ncap_edible_plot <- ggplot(subset(cleaned_mushrooms, class == \"Edible\"), aes(cap.shape, cap.diameter)) +\n  labs(title=\"Edible Mushroom Cap Diameter by Shape\", x=\"Cap Shape\", y=\"Cap Diameter (cm)\") +\n  geom_boxplot()\n\ncap_poison_plot <- ggplot(subset(cleaned_mushrooms, class == \"Poisonous\"), aes(cap.shape, cap.diameter)) +\n  labs(title=\"Poisonous Mushroom Cap Diameter by Shape\", x=\"Cap Shape\", y=\"Cap Diameter (cm)\") +\n  geom_boxplot()\n\ncap_color_edible_plot <- ggplot(subset(cleaned_mushrooms, class==\"Edible\"), aes(cap.color, cap.diameter)) + \n  labs(title=\"Edible Mushroom Cap Diameter by Color\", x=\"Cap Color\", y=\"Cap Diameter (cm)\") +\n  geom_boxplot()\n\ncap_color_poison_plot <- ggplot(subset(cleaned_mushrooms, class==\"Poisonous\"), aes(cap.color, cap.diameter)) + \n  labs(title=\"Poisonous Mushroom Cap Diameter by Color\", x=\"Cap Color\", y=\"Cap Diameter (cm)\") +\n  geom_boxplot()\n\nedible_plot <- ggplot(subset(cleaned_mushrooms, class == 'Edible'), aes(x = stem.width, y = stem.height, color= has.ring)) +\n  labs(title=\"Stem dimensions for Edible Mushrooms\", color=\"Has Ring\", x=\"Stem Width (cm)\", y=\"Stem Height (cm)\") +\n  geom_point()\n\npoison_plot <- ggplot(subset(cleaned_mushrooms, class == 'Poisonous'), aes(x = stem.width, y = stem.height, color= has.ring)) +\n  labs(title=\"Stem dimensions for Poisonous Mushrooms\", color=\"Has Ring\", x=\"Stem Width (cm)\", y=\"Stem Height (cm)\") +\n  geom_point()\n\n## Plotting categorical variables\n\nbruise_bleed <- as.data.frame(table(cleaned_mushrooms$does.bruise.or.bleed, cleaned_mushrooms$class))\nbruise_plot <- ggplot(bruise_bleed, aes(Var1, Var2, fill=Freq)) +\n  labs(title=\"Heat map of Bruising/Bleeding by Class\", x=\"Does Bruise/Bleed\", y=\"Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile()\n\ngill_color <- as.data.frame(table(cleaned_mushrooms$gill.color, cleaned_mushrooms$class))\ngill_color_plot <- ggplot(gill_color, aes(Var1, Var2, fill=Freq)) + \n  labs(title=\"Heat map of Gill Color by Class\", x=\"Gill Color\", y=\"Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile()\n\nhabitat <- as.data.frame(table(cleaned_mushrooms$habitat, cleaned_mushrooms$class))\nhabitat_plot <- ggplot(habitat, aes(Var1, Var2, fill=Freq)) + \n  labs(title=\"Heat map of Mushroom Habitat by Class\", x=\"Habitat\", y=\"Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile()\n\nseason <- as.data.frame(table(cleaned_mushrooms$season, cleaned_mushrooms$class))\nseason_plot <- ggplot(season, aes(Var1, Var2, fill=Freq)) + \n  labs(title=\"Heat map of Season Mushroom is Found by Class\", x=\"Season\", y=\"Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile()\n\n## Compile all plots into figure, organized by part of mushroom\nggarrange(cap_edible_plot, cap_poison_plot, cap_color_edible_plot, cap_color_poison_plot, edible_plot, poison_plot, bruise_plot, gill_color_plot, habitat_plot, season_plot, nrow = 5, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](lab-reproducibility_files/figure-html/exploratory fixed-1.png){width=1536}\n:::\n\n```{.r .cell-code}\nggsave(\"Figures/Figure1_Exploratory.png\", width = 20, height = 25)\n```\n:::\n\n\n\n## Exercise 5\n\nTo create a predictive regression model, we will want to have data to test that our algorithm is not trained on. So, we will randomly select a sample for training and testing. By setting the seed, we change the set of random numbers which will be produced.\n\nIn the given code, the comments have different suggestions for the seed and size of training set than the written code. It is unclear which is the correct set. We will perform our regression and check against the cloned repository (the excel workbook containing the regression is filed as Reproducibility-Lab/data/Logit_reg_model.xlsx) to determine which set is correct.\n\nSeed, set as written\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Set seed to 105 \nset.seed(130)\n\n## Take 75% of the cleaned mushrooms set for the training set, the remaining for the test set\nmushroom_numbers <- sample(seq_len(nrow(cleaned_mushrooms)), size = 0.70*nrow(cleaned_mushrooms))\n\nmushroom_train <- cleaned_mushrooms[mushroom_numbers,]\nmushroom_test <- cleaned_mushrooms[-mushroom_numbers,]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Create regression model with all variables, no interaction terms to keep all uniform\nlogit_reg_model <- glm(binary_class ~ stem.height + cap.diameter + cap.shape + cap.color + does.bruise.or.bleed + gill.color + stem.width + has.ring + habitat + season, data = mushroom_train, family = \"binomial\")\n\ntidy(logit_reg_model) |>\n  kable(digits=3)\n```\n:::\n\n\n\nAdjusted seed, set\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Set seed to 105 \nset.seed(105)\n\n## Take 75% of the cleaned mushrooms set for the training set, the remaining for the test set\nmushroom_numbers <- sample(seq_len(nrow(cleaned_mushrooms)), size = 0.75*nrow(cleaned_mushrooms))\n\nmushroom_train <- cleaned_mushrooms[mushroom_numbers,]\nmushroom_test <- cleaned_mushrooms[-mushroom_numbers,]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Create regression model with all variables, no interaction terms to keep all uniform\nlogit_reg_model <- glm(binary_class ~ stem.height + cap.diameter + cap.shape + cap.color + does.bruise.or.bleed + gill.color + stem.width + has.ring + habitat + season, data = mushroom_train, family = \"binomial\")\n\ntidy(logit_reg_model) |>\n  kable(digits=3)\n```\n:::\n\n\n\nWhich set matches the excel workbook given in the repository?\n\n**The second, where the comments match the code**\n\nMake sure the following chunk matches the correct chunk, so that the continued analysis will match the study.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Set seed to 105 \nset.seed(105)\n\n## Take 75% of the cleaned mushrooms set for the training set, the remaining for the test set\nmushroom_numbers <- sample(seq_len(nrow(cleaned_mushrooms)), size = 0.75*nrow(cleaned_mushrooms))\n\nmushroom_train <- cleaned_mushrooms[mushroom_numbers,]\nmushroom_test <- cleaned_mushrooms[-mushroom_numbers,]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Create regression model with all variables, no interaction terms to keep all uniform\nlogit_reg_model <- glm(binary_class ~ stem.height + cap.diameter + cap.shape + cap.color + does.bruise.or.bleed + gill.color + stem.width + has.ring + habitat + season, data = mushroom_train, family = \"binomial\")\n```\n:::\n\n\n\n## Exercise 6\n\nThe following code will find and classify the predicted probabilities according to four thresholds, mutating them onto the training set. A common error when trying to reproduce code from published studies (in RStudio) is when multiple libraries contain the same function. In these cases, you may receive an error, because one function is perceived as being another of the same name.\n\nWhile the following chunk may not show any errors, to ensure the mutate function is the correct mutate function, replace them with dplyr::mutate before each to ensure they are running correctly.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Find probabilities and classify with standard threshold\n\nlogit_pred_prob <- predict.glm(logit_reg_model, newdata=mushroom_test, type=\"response\")\nmushroom_test <- dplyr::mutate(mushroom_test, logit_pred_class_30 = factor(ifelse(logit_pred_prob >0.30, 1, 0)))\nmushroom_test <- dplyr::mutate(mushroom_test, logit_pred_class_40 = factor(ifelse(logit_pred_prob >0.40, 1, 0)))\nmushroom_test <- dplyr::mutate(mushroom_test, logit_pred_class_50 = factor(ifelse(logit_pred_prob >0.50, 1, 0)))\nmushroom_test <- dplyr::mutate(mushroom_test, logit_pred_class_60 = factor(ifelse(logit_pred_prob >0.60, 1, 0)))\n```\n:::\n\n\n\n## Exercise 7\n\nTo create a graphic to display the success of the regression, we have used ggplot to make one single heatmap of our confusion matrices in the following chunk. Validate what is returned with the heatmap in the repository (filed in Figures/Figure2_ConfMats.png).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Compile all plots into figure, organized by part of mushroom\n\nlogit_conf_30 <- as.data.frame(table(mushroom_test$binary_class, mushroom_test$logit_pred_class_30))\nlogit_conf_plot_30 <- ggplot(logit_conf_30, aes(Var1, Var2, fill=Freq)) +\n  labs(title=\"Logistic Regression Confusion Matrix (Threshold = 0.30)\", x=\"True Class\", y=\"Predicted Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile() +\n  geom_text(aes(label=Freq), size = 5)\n\nlogit_conf_40 <- as.data.frame(table(mushroom_test$binary_class, mushroom_test$logit_pred_class_40))\nlogit_conf_plot_40 <- ggplot(logit_conf_40, aes(Var1, Var2, fill=Freq)) +\n  labs(title=\"Logistic Regression Confusion Matrix (Threshold = 0.40)\", x=\"True Class\", y=\"Predicted Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile() +\n  geom_text(aes(label=Freq), size = 5)\n\nlogit_conf_50 <- as.data.frame(table(mushroom_test$binary_class, mushroom_test$logit_pred_class_50))\nlogit_conf_plot_50 <- ggplot(logit_conf_50, aes(Var1, Var2, fill=Freq)) +\n  labs(title=\"Logistic Regression Confusion Matrix (Threshold = 0.50)\", x=\"True Class\", y=\"Predicted Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile() +\n  geom_text(aes(label=Freq), size = 5)\n\nlogit_conf_60 <- as.data.frame(table(mushroom_test$binary_class, mushroom_test$logit_pred_class_60))\nlogit_conf_plot_60 <- ggplot(logit_conf_60, aes(Var1, Var2, fill=Freq)) +\n  labs(title=\"Logistic Regression Confusion Matrix (Threshold = 0.60)\", x=\"True Class\", y=\"Predicted Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile() +\n  geom_text(aes(label=Freq), size = 5)\n\nggarrange(logit_conf_plot_30, logit_conf_plot_40, logit_conf_plot_50, logit_conf_plot_60, nrow = 1, ncol = 1)\n```\n:::\n\n\n\nWhat is the difference between what was printed and what is filed?\n\n**Each heatmap has a single graphic instead of all being compiled**\n\nThe issue lies in the ggarrange function. We need to specify the amount or rows and columns corresponding to amount of graphics we want and how we want the maps to fit together. Alter the numbers to match the printed output with what is in the file structure.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Compile all plots into figure, organized by part of mushroom\n\nlogit_conf_30 <- as.data.frame(table(mushroom_test$binary_class, mushroom_test$logit_pred_class_30))\nlogit_conf_plot_30 <- ggplot(logit_conf_30, aes(Var1, Var2, fill=Freq)) +\n  labs(title=\"Logistic Regression Confusion Matrix (Threshold = 0.30)\", x=\"True Class\", y=\"Predicted Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile() +\n  geom_text(aes(label=Freq), size = 5)\n\nlogit_conf_40 <- as.data.frame(table(mushroom_test$binary_class, mushroom_test$logit_pred_class_40))\nlogit_conf_plot_40 <- ggplot(logit_conf_40, aes(Var1, Var2, fill=Freq)) +\n  labs(title=\"Logistic Regression Confusion Matrix (Threshold = 0.40)\", x=\"True Class\", y=\"Predicted Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile() +\n  geom_text(aes(label=Freq), size = 5)\n\nlogit_conf_50 <- as.data.frame(table(mushroom_test$binary_class, mushroom_test$logit_pred_class_50))\nlogit_conf_plot_50 <- ggplot(logit_conf_50, aes(Var1, Var2, fill=Freq)) +\n  labs(title=\"Logistic Regression Confusion Matrix (Threshold = 0.50)\", x=\"True Class\", y=\"Predicted Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile() +\n  geom_text(aes(label=Freq), size = 5)\n\nlogit_conf_60 <- as.data.frame(table(mushroom_test$binary_class, mushroom_test$logit_pred_class_60))\nlogit_conf_plot_60 <- ggplot(logit_conf_60, aes(Var1, Var2, fill=Freq)) +\n  labs(title=\"Logistic Regression Confusion Matrix (Threshold = 0.60)\", x=\"True Class\", y=\"Predicted Class\") +\n  theme(legend.key.width = unit(1, 'cm')) +\n  geom_tile() +\n  geom_text(aes(label=Freq), size = 5)\n\nggarrange(logit_conf_plot_30, logit_conf_plot_40, logit_conf_plot_50, logit_conf_plot_60, nrow = 2, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](lab-reproducibility_files/figure-html/heat map fixed-1.png){width=1536}\n:::\n\n```{.r .cell-code}\nggsave(\"Figures/Figure2_ConfMats.png\", width = 20, height = 15)\n```\n:::\n\n\n\n## Exercise 8\n\nTo evaluate the strengths of these models, we will compute precision, accuracy, and specificity, and then graph them.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Calculate accuracy and f2 from the confusion matrix\nTN <- logit_conf_30[1,4] # Set all values on conf matrix\nFP <- logit_conf_30[3,4]\nFN <- logit_conf_30[2,4]\nTP <- logit_conf_30[4,4]\nprecision_30 <- TP/(TP + FP) # Apply formula for precision\naccuracy_30 <- (TP + TN) / sum(logit_conf_30[,3])\nspecificity_30 <- TN / (TN + FP)\n\nTN <- logit_conf_40[1,4] # Set all values on conf matrix\nFP <- logit_conf_40[3,4]\nFN <- logit_conf_40[2,4]\nTP <- logit_conf_40[4,4]\nprecision_40 <- TP/(TP + FP) # Apply formula for precision \naccuracy_40 <- (TP + TN) / sum(logit_conf_40[,3])\nspecificity_40 <- TN / (TN + FP)\n\nTN <- logit_conf_50[1,4] # Set all values on conf matrix\nFP <- logit_conf_50[3,4]\nFN <- logit_conf_50[2,4]\nTP <- logit_conf_50[4,4]\nprecision_50 <- TP/(TP + FP) # Apply formula for precision\naccuracy_50 <- (TP + TN) / sum(logit_conf_60[,3])\nspecificity_50 <- TN / (TN + FP)\n\nTN <- logit_conf_60[1,4] # Set all values on conf matrix\nFP <- logit_conf_60[3,4]\nFN <- logit_conf_60[2,4]\nTP <- logit_conf_60[4,4]\nprecision_60 <- TP/(TP + FP) # Apply formula for precision\naccuracy_60 <- (TP + TN) / sum(logit_conf_60[,3])\nspecificity_60 <- TN / (TN + FP)\n\n## Plot accuracy, precision, and specificity together\n\nmodels <- c(\"0.30 Threshold\", \"0.40 Threshold\", \"0.50 Threshold\", \"0.60 Threshold\")\naccuracy <- c(accuracy_30, accuracy_40, accuracy_50, accuracy_60)\nprecision <- c(precision_30, precision_40, precision_50, precision_60)\nspecificity <- c(specificity_30, specificity_40, specificity_50, specificity_60)\nmodel_ratings <- data.frame(models, accuracy, precision, specificity)\n\nAccuracy_plot <- ggplot(model_ratings, aes(x = models, y=accuracy)) +\n  labs(title=\"Model Accuracy\", x=\"Model Type\", y=\"Accuracy\") +\n  geom_bar(stat = \"identity\")\n\nPrecision_plot <- ggplot(model_ratings, aes(x = models, y=precision)) +\n  labs(title=\"Model Precision\", x=\"Model Type\", y=\"Precision\") +\n  geom_bar(stat = \"identity\")\n\nSpecificity_plot <- ggplot(model_ratings, aes(x = models, y=specificity)) +\n  labs(title=\"Model Precision\", x=\"Model Type\", y=\"Specificity\") +\n  geom_bar(stat = \"identity\")\n\nggarrange(Accuracy_plot, Precision_plot, Specificity_plot, nrow = 1, ncol = 3)\n\nscoring <- data.frame(Model=c(\"Accuracy\", \"Precision\", \"Specificity\"), thirty = c(accuracy_30, precision_30, specificity_30), forty = c(accuracy_40, precision_40, specificity_40), fifty = c(accuracy_50, precision_50, specificity_50), sixty = c(accuracy_60, precision_60, specificity_60))\nkable(scoring, digits = 3)\n```\n:::\n\n\n\nCopy the error message from running this chunk of code below:\n\n**Error in data.frame(models, accuracy, precision, specificity) : arguments imply differing number of rows: 4, 0**\n\nThis type of error is symptomatic of index errors. Open one of the logit_conf dataframes in your R environment. Which column has the frequencies?\n\n**3**\n\nIn brackets, are formatted \\[row, column\\], so for all of the TN, FP, FN, and TPs that refer to indices, they list an incorrect index for column. In general, using numerical indices should be avoided, as reproducibility is aided by clear references to rows and columns of tables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Calculate accuracy and f2 from the confusion matrix\nTN <- logit_conf_30[1,3] # Set all values on conf matrix\nFP <- logit_conf_30[3,3]\nFN <- logit_conf_30[2,3]\nTP <- logit_conf_30[4,3]\nprecision_30 <- TP/(TP + FP) # Apply formula for precision\naccuracy_30 <- (TP + TN) / sum(logit_conf_30[,3])\nspecificity_30 <- TN / (TN + FP)\n\nTN <- logit_conf_40[1,3] # Set all values on conf matrix\nFP <- logit_conf_40[3,3]\nFN <- logit_conf_40[2,3]\nTP <- logit_conf_40[4,3]\nprecision_40 <- TP/(TP + FP) # Apply formula for precision \naccuracy_40 <- (TP + TN) / sum(logit_conf_40[,3])\nspecificity_40 <- TN / (TN + FP)\n\nTN <- logit_conf_50[1,3] # Set all values on conf matrix\nFP <- logit_conf_50[3,3]\nFN <- logit_conf_50[2,3]\nTP <- logit_conf_50[4,3]\nprecision_50 <- TP/(TP + FP) # Apply formula for precision\naccuracy_50 <- (TP + TN) / sum(logit_conf_60[,3])\nspecificity_50 <- TN / (TN + FP)\n\nTN <- logit_conf_60[1,3] # Set all values on conf matrix\nFP <- logit_conf_60[3,3]\nFN <- logit_conf_60[2,3]\nTP <- logit_conf_60[4,3]\nprecision_60 <- TP/(TP + FP) # Apply formula for precision\naccuracy_60 <- (TP + TN) / sum(logit_conf_60[,3])\nspecificity_60 <- TN / (TN + FP)\n\n## Plot accuracy, precision, and specificity together\n\nmodels <- c(\"0.30 Threshold\", \"0.40 Threshold\", \"0.50 Threshold\", \"0.60 Threshold\")\naccuracy <- c(accuracy_30, accuracy_40, accuracy_50, accuracy_60)\nprecision <- c(precision_30, precision_40, precision_50, precision_60)\nspecificity <- c(specificity_30, specificity_40, specificity_50, specificity_60)\nmodel_ratings <- data.frame(models, accuracy, precision, specificity)\n\nAccuracy_plot <- ggplot(model_ratings, aes(x = models, y=accuracy)) +\n  labs(title=\"Model Accuracy\", x=\"Model Type\", y=\"Accuracy\") +\n  geom_bar(stat = \"identity\")\n\nPrecision_plot <- ggplot(model_ratings, aes(x = models, y=precision)) +\n  labs(title=\"Model Precision\", x=\"Model Type\", y=\"Precision\") +\n  geom_bar(stat = \"identity\")\n\nSpecificity_plot <- ggplot(model_ratings, aes(x = models, y=specificity)) +\n  labs(title=\"Model Precision\", x=\"Model Type\", y=\"Specificity\") +\n  geom_bar(stat = \"identity\")\n\nggarrange(Accuracy_plot, Precision_plot, Specificity_plot, nrow = 1, ncol = 3)\n```\n\n::: {.cell-output-display}\n![](lab-reproducibility_files/figure-html/scoring fixed-1.png){width=1344}\n:::\n\n```{.r .cell-code}\nggsave(\"Figures/Figure3_Scoring.png\", width = 20, height = 10)\n\nscoring <- data.frame(Model=c(\"Accuracy\", \"Precision\", \"Specificity\"), thirty = c(accuracy_30, precision_30, specificity_30), forty = c(accuracy_40, precision_40, specificity_40), fifty = c(accuracy_50, precision_50, specificity_50), sixty = c(accuracy_60, precision_60, specificity_60))\nkable(scoring, digits = 3)\n```\n\n::: {.cell-output-display}\n\n\n|Model       | thirty| forty| fifty| sixty|\n|:-----------|------:|-----:|-----:|-----:|\n|Accuracy    |  0.635| 0.654| 0.684| 0.696|\n|Precision   |  0.610| 0.642| 0.704| 0.780|\n|Specificity |  0.254| 0.414| 0.614| 0.781|\n\n\n:::\n:::\n\n\n\n## Exercise 9\n\nTo further evaluate the strength of this logistic regression model, without selecting specific thresholds, we will construct an ROC Curve and calculate the area under the curve.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Create ROC plots for each\nroc.logit <- roc(as.numeric(mushroom_test$binary_class), logit_pred_prob)\n\n## Plot ROC Curve\nggroc(list(Logit = roc.logit)) +\n  labs(title = \"ROC Curve\")\n```\n\n::: {.cell-output-display}\n![](lab-reproducibility_files/figure-html/roc-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"Figures/Figure4_ROCCurve.png\", width = 15, height = 10)\n```\n:::\n\n\n\nLooking at the file in Figures/Figure4_ROCCurve.png, does this figure appear to match?\n\n**Yes**\n\nNow, we will calculate the area under curve to evaluate how close to a perfect model it can be. The following chunk creates and displays a table of the value.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Create table with aucs of the rocs\naucs <- data.frame(Model=c(\"Logistic Regression\", \"Naive Bayes\", \"LDA\", \"RF\"), AUC=c(auc(roc.logit)))\nkable(scoring, digits = 3)\n```\n:::\n\n\n\nClearly, this table is not displaying AUC. Parse through the chunk and look for the error. What is causing the problem?\n\n**The kable is for the wrong dataframe**\n\nIn the chunk below, make the edit to fix the chunk.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Create table with aucs of the rocs\naucs <- data.frame(Model=c(\"Logistic Regression\", \"Naive Bayes\", \"LDA\", \"RF\"), AUC=c(auc(roc.logit)))\nkable(scoring, digits = 3)\n```\n\n::: {.cell-output-display}\n\n\n|Model       | thirty| forty| fifty| sixty|\n|:-----------|------:|-----:|-----:|-----:|\n|Accuracy    |  0.635| 0.654| 0.684| 0.696|\n|Precision   |  0.610| 0.642| 0.704| 0.780|\n|Specificity |  0.254| 0.414| 0.614| 0.781|\n\n\n:::\n:::\n\n\n\n## Exercise 10\n\nWhat is a recommendation you can make to avoid similar reproducibility in the process of creating similar code? Think of the kind of errors and fixes you've made and take into account that these issues were replicated from the same variety of issues in other studies' code.\n\n**Avoid using number subscripts, understanding libraries and specifying where there is overlap, rerunning code before publishing, etc**\n",
    "supporting": [
      "lab-reproducibility_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}